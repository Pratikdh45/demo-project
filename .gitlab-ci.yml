stages:
  - test
  - build
  - docker_build
  - deploy
  # - incremental_rollout_10%
  # - incremental_rollout_100%

variables:
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  DOCKER_IMAGE_PREFIX: "repository/docker-private/demo-project/quarkus-helloworld"
  CI_REGISTRY_IMAGE: "repository/docker-private/demo-project/quarkus-helloworld"
  OC_IMAGE_NAME_AND_TAG: ""
  OPENSHIFT_SERVER: ""
  OPENSHIFT_PROJECT_DEV: "demo-project"
  OPENSHIFT_PROJECT_QA: "demo-qa-project"
  OPENSHIFT_PROJECT_STAGING: "demo-staging-project"
  OPENSHIFT_PROJECT_PROD: "demo-prod-project"

test:
  stage: test
  image: maven:3.8.4-openjdk-11-slim
  script:
    - mvn $MAVEN_CLI_OPTS test sonar:sonar -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_LOGIN -Dsonar.password=$SONAR_PASSWORD
  tags:
    - master

build:
  stage: build
  image: maven:3.8.4-openjdk-11-slim
  script:
   - export VERSION=$(mvn --non-recursive help:evaluate -Dexpression=project.version -q -DforceStdout)
   - echo $VERSION > version.txt
   - mvn clean package
   - chmod -R +x target
  artifacts:
    paths:
      - version.txt
      - target
  tags:
    - master

docker_build:
  stage: docker_build
  image:
    name: 
  variables:
    DOCKER_HOST: tcp://dind.gitlab-runner:2375
  services:
  - name: 
    entrypoint: ["env", "-u", "DOCKER_HOST"]
    command: ["dockerd-entrypoint.sh"]
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
    - echo $HOME/.docker/config.json
    - chmod -R +x target
    - echo "Preparing for Docker image..."
  script:
    - cat version.txt
    - export CI_COMMIT_SHORT_SHA=$(cat version.txt)
    - echo "CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}"
    - echo "$CI_COMMIT_SHORT_SHA"
    - sed -i "s/VERSION/$CI_COMMIT_SHORT_SHA/g" Dockerfile
    - docker build -t "$CI_REGISTRY_IMAGE:${CI_COMMIT_SHORT_SHA}" .
    - docker images | grep $CI_REGISTRY_IMAGE
    - docker push "$CI_REGISTRY_IMAGE:${CI_COMMIT_SHORT_SHA}"
  dependencies:
    - build 
  tags:
    - master


deploy_dev:
  stage: deploy
  image: $OC_IMAGE_NAME_AND_TAG
  before_script:
    - cat version.txt
    - export CI_COMMIT_SHORT_SHA=$(cat version.txt)
    - echo "CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}"
    - echo "$CI_COMMIT_SHORT_SHA"
  script:
    - echo "Deploying to Dev environment..."
    - sed -i "s/VERSION/$CI_COMMIT_SHORT_SHA/g" k8s/deployment.yml
    - sed -i "s/NAMESPACE/$OPENSHIFT_PROJECT_DEV/g" k8s/deployment.yml
    # - sed -i "s/NAMESPACE/$OPENSHIFT_PROJECT_DEV/g" k8s/service.yml
    - cat k8s/deployment.yml
    - |
      oc login $OPENSHIFT_SERVER --token=$ --insecure-skip-tls-verify=true
      oc project $OPENSHIFT_PROJECT_DEV
      oc apply -f k8s/deployment.yml
#      oc apply -f k8s/service.yml
  only:
    - /^feature-.*$/
  tags:
    - master

deploy_qa:
  stage: deploy
  image: $OC_IMAGE_NAME_AND_TAG
  before_script:
    - cat version.txt
    - export CI_COMMIT_SHORT_SHA=$(cat version.txt)
    - echo "CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}"
    - echo "$CI_COMMIT_SHORT_SHA"
  script:
    - echo "Deploying to QA environment..."
    - sed -i "s/VERSION/$CI_COMMIT_SHORT_SHA/g" k8s/deployment.yml
    - sed -i "s/NAMESPACE/$OPENSHIFT_PROJECT_QA/g" k8s/deployment.yml
#    - sed -i "s/NAMESPACE/$OPENSHIFT_PROJECT_QA/g" k8s/service.yml
    - cat k8s/deployment.yml
    - |
      oc login $OPENSHIFT_SERVER --token=$ --insecure-skip-tls-verify=true
      oc project $OPENSHIFT_PROJECT_QA
      oc apply -f k8s/deployment.yml
#      oc apply -f k8s/service.yml
  only:
    - /^feature-.*$/
  when: manual
  allow_failure: true
  tags:
    - master

deploy_staging:
  stage: deploy
  image: $OC_IMAGE_NAME_AND_TAG
  before_script:
    - cat version.txt
    - export CI_COMMIT_SHORT_SHA=$(cat version.txt)
    - echo "CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}"
    - echo "$CI_COMMIT_SHORT_SHA"
  script:
    - echo "Deploying to Staging environment..."
    - sed -i "s/VERSION/$CI_COMMIT_SHORT_SHA/g" k8s/deployment.yml
    - sed -i "s/NAMESPACE/$OPENSHIFT_PROJECT_STAGING/g" k8s/deployment.yml
    - sed -i "s/NAMESPACE/$OPENSHIFT_PROJECT_STAGING/g" k8s/service.yml
    - cat k8s/deployment.yml
    - |
      oc login $OPENSHIFT_SERVER --token=$ --insecure-skip-tls-verify=true
      oc project $OPENSHIFT_PROJECT_STAGING
      oc apply -f k8s/deployment.yml
      oc apply -f k8s/service.yml
  only:
    - /^release-.*$/
  tags:
    - master

# deploy_prod:
#   stage: deploy
#   image: $OC_IMAGE_NAME_AND_TAG
#   before_script:
#     - cat version.txt
#     - export CI_COMMIT_SHORT_SHA=$(cat version.txt)
#     - echo "CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}"
#     - echo "$CI_COMMIT_SHORT_SHA"
#   script:
#     - echo "Deploying to Production environment..."
#     - sed -i "s/VERSION/$CI_COMMIT_SHORT_SHA/g" k8s/deployment.yml
#     - sed -i "s/NAMESPACE/$OPENSHIFT_PROJECT_PROD/g" k8s/deployment.yml
#     - cat k8s/deployment.yml
#     - |
#       oc login $OPENSHIFT_SERVER --token=$ --insecure-skip-tls-verify=true
#       oc project $OPENSHIFT_PROJECT_PROD
#       oc apply -f k8s/deployment.yml
#   only:
#     - /^release-.*$/
#   when: manual
#   allow_failure: true
#   tags:
#     - master

# .rollout_template: &rollout_template
#   stage: incremental rollout
#   image: $OC_IMAGE_NAME_AND_TAG
#   before_script:
#     - cat version.txt
#     - export CI_COMMIT_SHORT_SHA=$(cat version.txt)
#     - echo "CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}"
#     - echo "$CI_COMMIT_SHORT_SHA"
#   script:
#     - echo "Performing incremental rollout..."
#     - sed -i "s/VERSION/$CI_COMMIT_SHORT_SHA/g" k8s/deployment.yml
#     - sed -i "s/NAMESPACE/$OPENSHIFT_PROJECT_DEV/g" k8s/deployment.yml
#     - cat k8s/deployment.yml
#     - |
#       oc login $OPENSHIFT_SERVER --token=$ --insecure-skip-tls-verify=true
#       oc project $OPENSHIFT_PROJECT_DEV
#       oc apply -f k8s/deployment.yml
#       # Perform incremental rollout logic here
#   only:
#     - /^feature-.*$/
#   tags:
#     - master
    
# .deploy_manual:
#   <<: *rollout_template
#   stage: prod
#   when: manual
#   only:
#     refs:
#       - /^feature-.*$/
#     kubernetes: active
#     variables:
#       - $INCREMENTAL_ROLLOUT_MODE == "manual"
#       - $INCREMENTAL_ROLLOUT_ENABLED
#   except:
#     variables:
#       - $INCREMENTAL_ROLLOUT_MODE == "timed"

# timed rollout 10pct:
#   <<: *rollout_template
#   stage: incremental_rollout_10%
#   variables:
#     ROLLOUT_PERCENTAGE: 10

# timed rollout 100pct:
#   <<: *rollout_template
#   stage: incremental_rollout_100%
#   variables:
#     ROLLOUT_PERCENTAGE: 100
