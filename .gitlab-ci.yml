stages:
  - build
#  - test
  - docker_build
  - deploy

variables:
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  MAVEN_OPTS: "-Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository"
  DOCKER_IMAGE_PREFIX: "repository/docker-private/demo-project/quarkus-helloworld"
  CI_REGISTRY_IMAGE: "172.30.38.4:8083/repository/docker-private/demo-project/quarkus-helloworld"
  OC_IMAGE_NAME_AND_TAG: "repository/docker-private/alpine:oc-4.10.4"
  OPENSHIFT_SERVER: "https://api.openshift.mobicom.mn:6443"
  OPENSHIFT_PROJECT_DEV: "quarkus-demo-project"
  OPENSHIFT_PROJECT_QA: "quarkus-demo-qa-project"
  OPENSHIFT_PROJECT_STAGING: "quarkus-demo-staging-project"
  OPENSHIFT_PROJECT_PROD: "quarkus-demo-prod-project"

build:
  stage: build
  image: maven:3.8.4-openjdk-11-slim
  script:
   - export VERSION=$(mvn --non-recursive help:evaluate -Dexpression=project.version -q -DforceStdout)
   - echo $VERSION > version.txt
   - mvn clean package -DskipTests -Dquarkus.container-image.build=false
   - chmod -R +x target/quarkus-app/quarkus-run.jar
  artifacts:
    paths:
      - version.txt
      - target/quarkus-app/quarkus-run.jar
  tags:
    - master

# test:
#   stage: test
#   image: maven:3.8.4-openjdk-11-slim
#   script:
#     - mvn $MAVEN_CLI_OPTS test sonar:sonar -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_LOGIN -Dsonar.password=$SONAR_PASSWORD
#   tags:
#     - master

docker_build:
  stage: docker_build
  image:
    name: docker:19.03.14
  variables:
    DOCKER_HOST: tcp://dind.gitlab-runner:2375
  services:
  - name: docker:19.03.14-dind
    entrypoint: ["env", "-u", "DOCKER_HOST"]
    command: ["dockerd-entrypoint.sh"]
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
    - echo $HOME/.docker/config.json
    - echo "Preparing for Docker image..."
  script:
    - cat version.txt
    - export CI_COMMIT_SHORT_SHA=$(cat version.txt)
    - echo "CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}"
    - echo "$CI_COMMIT_SHORT_SHA"
    - docker build -t "$CI_REGISTRY_IMAGE:${CI_COMMIT_SHORT_SHA}" .
    - docker images | grep $CI_REGISTRY_IMAGE
    - docker push "$CI_REGISTRY_IMAGE:${CI_COMMIT_SHORT_SHA}"
  dependencies:
    - build 
  tags:
    - master


deploy_dev:
  stage: deploy
  image: $OC_IMAGE_NAME_AND_TAG
  before_script:
    - cat version.txt
    - export CI_COMMIT_SHORT_SHA=$(cat version.txt)
    - echo "CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}"
    - echo "$CI_COMMIT_SHORT_SHA"
  script:
    - echo "Deploying to Dev environment..."
    - sed -i "s/VERSION:$CI_COMMIT_SHORT_SHA/g" k8s/deployment.yml
    - cat k8s/deployment.yml
    - |
      oc login $OPENSHIFT_SERVER --token=$OCP_TOKEN_DEMO --insecure-skip-tls-verify=true
      oc project $OPENSHIFT_PROJECT_DEV
      oc apply -f k8s/deployment.yml
  only:
    - /^feature-.*$/
  tags:
    - master


# deploy_qa:
#   stage: deploy
#   image: $OC_IMAGE_NAME_AND_TAG
#   script:
#     - echo "Deploying to QA environment..."
#     - |
#       oc login $OPENSHIFT_SERVER --token=$OCP_TOKEN_DEMO_QA --insecure-skip-tls-verify=true
#       oc project $OPENSHIFT_PROJECT_QA
#       oc apply -f k8s/deployment.yml
#   only:
#     - /^feature-.*$/
#   when: manual
#   allow_failure: true
#   tags:
#     - master


# deploy_staging:
#   stage: deploy
#   image: $OC_IMAGE_NAME_AND_TAG
#   script:
#     - echo "Deploying to Staging environment..."
#     - |
#       oc login $OPENSHIFT_SERVER --token=$OCP_TOKEN_DEMO_STAGING --insecure-skip-tls-verify=true
#       oc project $OPENSHIFT_PROJECT_STAGING
#       oc apply -f k8s/deployment.yml
#   only:
#     - /^release-.*$/
#   tags:
#     - master

# deploy_prod:
#   stage: deploy
#   image: $OC_IMAGE_NAME_AND_TAG
#   script:
#     - echo "Deploying to Production environment..."
#     - |
#       oc login $OPENSHIFT_SERVER --token=$OCP_TOKEN_DEMO_PROD --insecure-skip-tls-verify=true
#       oc project $OPENSHIFT_PROJECT_PROD
#       oc apply -f k8s/deployment.yml
#   only:
#     - /^release-.*$/
#   when: manual
#   allow_failure: true
  # tags:
  #   - master
